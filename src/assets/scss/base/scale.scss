// ЦЕЛЕВЫЕ РАЗРЕШЕНИЯ
$mobile-width: 375;
$tablet-width: 424;
$desktop-width: 1920;

// "ПРИВАТНЫЕ" МЕТОДЫ
// Здесь ничего не меняется
// Первый из массива
@function first($list) {
  @return nth($list, 1);
}

// Последний из массива
@function last($list) {
  @return nth($list, length($list));
}

// Слайс как у js-массивов
@function slice($list, $start: 1, $end: length($list)) {
  $result: null;

  @if type-of($start) != number or type-of($end) != number {
    @warn "Either $start or $end are not a number for `slice`.";
  }
  @else if $start > $end {
    @warn "The start index has to be lesser than or equals to the end index for `slice`.";
  }@else if $start < 1 or $end < 1 {
    @warn "List indexes must be non-zero integers for `slice`.";
  }@else if $start > length($list) {
    @warn "List index is #{$start} but list is only #{length($list)} item long for `slice`.";
  }@else if $end > length($list) {
    @warn "List index is #{$end} but list is only #{length($list)} item long for `slice`.";
  }@else {
    $result: ();

    @for $i from $start through $end {
      $result: append($result, nth($list, $i));
    }
  }
  @return $result;
}

// Замена подстроки
/// Replace `$search` with `$replace` in `$string`
/// @author Kitty Giraudel
/// @param {String} $string - Initial string
/// @param {String} $search - Substring to replace
/// @param {String} $replace ('') - New value
/// @return {String} - Updated string
@function str-replace($string, $search, $replace: '') {
  @debug $string;
  $index: str-index($string, $search);

  @if $index {
    @return str-slice($string, 1, $index - 1) + $replace + str-replace(str-slice($string, $index + str-length($search)), $search, $replace);
  }

  @return $string;
}

// Округление чисел
@function decimal-round($number, $digits: 0, $mode: ceil) {
  $n: 1;
  // $number должна быть числом
  @if type-of($number) != number {
    @warn "#{$number} is not a number.";

    @return $number;
  }

  // $digits должна быть числом без единиц измерения;
  @if type-of($digits) != number {
    @warn "#{$digits} is not a number.";
    @return $number;
  }@else if not unitless($digits) {
    @warn "#{$digits} has a unit.";

    @return $number;
  }

  @if $digits > 0 {
    @for $i from 1 through $digits {
      $n: $n * 10;
    }
  }

  @if $mode == round {
    @return calc(round($number * $n) / $n);
  }@else if $mode == ceil {
    @return calc(ceil($number * $n) / $n);
  }@else if $mode == floor {
    @return calc(floor($number * $n) / $n);
  }@else {
    @warn "#{$mode} is undefined keyword.";

    @return $number;
  }
}

// Переводим пиксели в vw
@function vw($size, $width) {
  $context: $width * 0.01;

  @return decimal-round(calc($size / $context), 3) * 1vw;

// Переводим число в пиксели
}
@function num-to-px($num) {
  @return $num * 1px;
}

// Генерирует CSS-правило с нужным медиа-выражением
@mixin media-rule($media, $property, $value, $is-transform) {
  $prop: $property;
  $val: $value;

  @if $is-transform {
    $prop: "transform";
    $val: unquote('#{$property + "("}#{$value}")"');
  }

  @if $media {
    @include r(#{$media}) {
      #{$prop}: $val;
    }
  }@else {
    #{$prop}: $val;
  }
}
// Генерирует отскейленный размер
// $values - список значений для преобразования
// $function - функция преобразования
// $separator - разделитель итоговых значений
// $suffix - что-то, что нужно добавить в самый конец после итоговых значений
@function scale-values($values, $function, $separator: space, $suffix: false) {
  $vals: $values;

  // Функция ли переданное значение
  $is-func: false;

  @if first($values) == "func" {
    $is-func: true;
    $vals: slice($values, 3);
  }

  $scaled-values: ();

  @each $v in $vals {
    $value: $v;

    @if type_of($v) == number and unit($v) == "" {
      $value: call(get-function($function), $v);
    }

    @if $is-func {
      $value: #{str-replace(nth($values, 2), "$", $value)};
    }

    $scaled-values: append($scaled-values, $value, $separator);
  };
  // Добавляем суффикс
  @if $suffix {
    $scaled-values: append($scaled-values, $suffix, $separator);
  }

  @return $scaled-values;

// НАЧИНАЯ ОТСЮДА МОЖНО ВНОСИТЬ ИЗМЕНЕНИЯ В СВОЙ ПРОЕКТ
// "ПУБЛИЧНЫЕ" МЕТОДЫ, используй их в обход основного миксина, если нужно
// vw для мобильного
}
@function vw-mob($size) {
  @return vw($size, $mobile-width);
}

// vw для десктопа
@function vw-desk($size) {
  @return vw($size, $desktop-width);
}

// Получаем отскейленную величину в пикселях
@function scale-size($size, $from: $mobile-width, $to: $tablet-width) {
  $query: $size * $to;
  @return decimal-round(calc($query / $from) , 1) * 1px;

// ОСНОВНОЙ МИКСИН
// Задает правильные величины на всех разрешениях
// $property - свойство, которое хотим отскейлить
// $mvalues - значение для мобильных; принимает что угодно (если нужны пиксели, передавать без размерных единиц)
// $dvalues - значение для десктопа; аналогично $mvalues
// $suffix - что-то, что нужно вставить после отскейленных размеров
}
@mixin scale($property, $dvalues, $IpadProvalues, $mvalues, $suffix: null) {  // Список трансформаций, которые поддерживают скейл
  $transforms: "translate", "translateX", "translateY", "translateZ", "translate3d";

  // Трансформация ли переданное свойство
  $is-transform: false;

  // Разделитель значений
  $separator: space;

  // Если скейлим transform:translate, меняем разделитель для значений на запятую
  @each $transform in $transforms {
    @if $transform == $property {
      $separator: comma;
      $is-transform: true;
    }
  };

  // Десктопные значения
  @if $dvalues {
    $desk-wide-values: scale-values($dvalues, vw-desk, $separator, $suffix);
    $fullhd-values: scale-values($dvalues, num-to-px, $separator, $suffix);
    // Отскейленные стили
    @include media-rule(null, $property, $fullhd-values, $is-transform);
    @include media-rule($breakpoints-desc, $property, $desk-wide-values, $is-transform);
  };
  // Планшеты с большим экраном
  @if $IpadProvalues {
    $IpadPro-values: scale-values($IpadProvalues, scale-size, $separator, $suffix);
    $Ipad-values: scale-values($IpadProvalues, num-to-px, $separator, $suffix);
    // Отскейленные стили
    @include media-rule($breakpoints-lg, $property, $IpadPro-values, $is-transform);
    @include media-rule($breakpoints-md, $property, $Ipad-values, $is-transform);
  };
  // Мобильные значения
  @if $mvalues {
    $mobile-values: scale-values($mvalues, vw-mob, $separator, $suffix);
    $tablet-values: scale-values($mvalues, scale-size, $separator, $suffix);
    // Отскейленные стили
    @include media-rule($breakpoints-sm, $property, $tablet-values, $is-transform);
    @include media-rule($breakpoints-xs, $property, $mobile-values, $is-transform);
  }
}